const milesPerYear=1e4;const daysInYear=365;const leaseYears=3;const totalMiles=milesPerYear*leaseYears;const milesPerDay=Number(totalMiles/(daysInYear*leaseYears)).toFixed(0);const purchaseDate=new Date(2024,2,15);const currentDate=new Date;const timeLapsed=currentDate.getTime()-purchaseDate.getTime();const daysLapsed=Math.floor(timeLapsed/(1e3*3600*24));let actualMilesUsed=0;const allowedMiles=[];const actualMiles=[];const days=[];for(let i=0;i<=daysLapsed;i++){allowedMiles.push(milesPerDay*i);actualMiles.push(0);days.push(i)}const currentMonth=currentDate.getMonth();const nextMonth=(currentMonth+1)%12;const year=currentDate.getFullYear();const startOfMonth=new Date(year,currentMonth,15);const endOfMonth=new Date(year,nextMonth,14);const monthWhere15thStarts=startOfMonth.toLocaleString("default",{month:"long"});const daysInMonthCycle=Math.ceil((endOfMonth.getTime()-startOfMonth.getTime())/(1e3*3600*24))+1;const allowedMilesInMonth=(milesPerDay*daysInMonthCycle).toFixed(0);const currentDay=currentDate.getDate();let daysSinceStartOfMonth;if(currentDay>=15){daysSinceStartOfMonth=currentDay-14}else{const daysInLastMonth=new Date(currentDate.getFullYear(),currentDate.getMonth(),0).getDate();const daysFromLastMonth=daysInLastMonth-14;const daysFromThisMonth=currentDay;daysSinceStartOfMonth=daysFromLastMonth+daysFromThisMonth}function setTextContent(id,content){document.getElementById(id).textContent=content}const potentialCurrentMiles=(milesPerDay*daysSinceStartOfMonth).toFixed(0);const ctx1=document.getElementById("mileageChart").getContext("2d");const mileageChart=new Chart(ctx1,{type:"line",data:{labels:days,datasets:[{label:"Allowed Miles",data:allowedMiles,fill:false,borderColor:"#1E88E5",backgroundColor:"#1E88E5",tension:.1},{label:"Actual Miles Used",data:actualMiles,fill:false,borderColor:"#FFC107",backgroundColor:"#FFC107",tension:.1}]},options:{scales:{x:{title:{display:true,text:"Days Since Purchase"}},y:{title:{display:true,text:"Miles"},ticks:{precision:0}}}}});const initialActualMilesUsed=0;const ctx2=document.getElementById("barChart").getContext("2d");let barChart;function initializeBarChart(){const milesAllowedPerWeek=milesPerDay*7;let actualMilesDrivenThisWeek=0;const reportedMiles=localStorage.getItem("reportedMiles");if(reportedMiles){const reportedMilesObj=JSON.parse(reportedMiles);actualMilesDrivenThisWeek=reportedMilesObj.currentValue}barChart=new Chart(ctx2,{type:"bar",data:{labels:["Allowed Miles","Actual Miles Driven"],datasets:[{label:"Miles This Week",data:[milesAllowedPerWeek,actualMilesDrivenThisWeek],backgroundColor:["rgba(30, 136, 229, 0.5)","rgba(255, 193, 7, 0.5)"],borderColor:["rgba(30, 136, 229, 1)","rgba(255, 193, 7, 1)"],borderWidth:1}]},options:{scales:{y:{beginAtZero:true,ticks:{precision:0}}}}})}function updateBarChart(){const milesAllowedPerWeek=milesPerDay*7;let actualMilesDrivenThisWeek=0;const reportedMiles=localStorage.getItem("reportedMiles");if(reportedMiles){const reportedMilesObj=JSON.parse(reportedMiles);actualMilesDrivenThisWeek=reportedMilesObj.currentValue}barChart.data.datasets[0].data=[milesAllowedPerWeek,actualMilesDrivenThisWeek];barChart.update()}initializeBarChart();const ctx3=document.getElementById("pieChart").getContext("2d");const pieChart=new Chart(ctx3,{type:"pie",data:{labels:[`Allowed Miles in ${monthWhere15thStarts}`,`Potential Current Miles for ${monthWhere15thStarts}`],datasets:[{label:"Miles",data:[allowedMilesInMonth,potentialCurrentMiles],backgroundColor:["rgba(30, 136, 229, 0.5)","rgba(255, 193, 7, 0.5)"],borderColor:["rgba(30, 136, 229, 1)","rgba(255, 193, 7, 1)"],borderWidth:1}]},options:{scales:{y:{beginAtZero:true,ticks:{precision:0}}}}});const ctx4=document.getElementById("doughnutChart").getContext("2d");const doughnutChart=new Chart(ctx4,{type:"doughnut",data:{labels:["Total Miles Left","Actual Miles Used"],datasets:[{label:"Miles",data:[totalMiles,0],backgroundColor:["rgba(30, 136, 229, 0.5)","rgba(255, 193, 7, 0.5)"],borderColor:["rgba(30, 136, 229, 1)","rgba(255, 193, 7, 1)"],borderWidth:1}]},options:{scales:{y:{beginAtZero:true,ticks:{precision:0}}}}});const storedActualMilesUsed=localStorage.getItem("actualMilesUsed");if(storedActualMilesUsed!==null){actualMilesUsed=parseInt(storedActualMilesUsed);updateCharts(actualMilesUsed);setTextContent("totalMilesDriven",actualMilesUsed.toFixed(0))}else{localStorage.setItem("actualMilesUsed",0)}function updateCharts(newActualMilesUsed){pieChart.data.datasets[0].data=[allowedMilesInMonth,potentialCurrentMiles];doughnutChart.data.datasets[0].data[0]=totalMiles-newActualMilesUsed;doughnutChart.data.datasets[0].data[1]=newActualMilesUsed;mileageChart.data.datasets[1].data=[{x:daysLapsed,y:newActualMilesUsed}];mileageChart.update();updateBarChart();pieChart.update();doughnutChart.update();updateDifference(newActualMilesUsed)}function setValues(){const actualMilesInput=document.getElementById("actualMilesInput").value;const newActualMilesUsed=parseInt(actualMilesInput);localStorage.setItem("actualMilesUsed",newActualMilesUsed);updateCharts(newActualMilesUsed);setTextContent("totalMilesDriven",newActualMilesUsed.toFixed(0))}function setReportedMilesLocalStorage(milesValue){const currentDate=new Date;const startOfWeek=new Date(currentDate);startOfWeek.setDate(currentDate.getDate()-currentDate.getDay());startOfWeek.setHours(0,0,0,0);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(endOfWeek.getDate()+6);endOfWeek.setHours(23,59,59,999);const reportedMilesObj={startOfWeekValue:milesValue,currentValue:0,ttl:endOfWeek.toISOString()};localStorage.setItem("reportedMiles",JSON.stringify(reportedMilesObj));setTextContent("reportedMiles","Not enough data to calculate")}window.onload=function(){const reportedMiles=localStorage.getItem("reportedMiles");const actualMilesUsed=localStorage.getItem("actualMilesUsed");const milesValue=actualMilesUsed!=null?JSON.parse(actualMilesUsed):0;if(!reportedMiles){setReportedMilesLocalStorage(milesValue)}else{const reportedMilesObj=JSON.parse(reportedMiles);const ttl=new Date(reportedMilesObj.ttl);const currentDate=new Date;if(currentDate>ttl){const startOfWeek=new Date(currentDate);startOfWeek.setDate(currentDate.getDate()-currentDate.getDay());startOfWeek.setHours(0,0,0,0);const endOfWeek=new Date(startOfWeek);endOfWeek.setDate(endOfWeek.getDate()+6);endOfWeek.setHours(23,59,59,999);reportedMilesObj.startOfWeekValue=milesValue;reportedMilesObj.currentValue=0;reportedMilesObj.ttl=endOfWeek.toISOString();localStorage.setItem("reportedMiles",JSON.stringify(reportedMilesObj));setTextContent("reportedMiles",0)}else{setTextContent("reportedMiles",reportedMilesObj.currentValue)}}};function setReportedMiles(){const actualMilesInput=document.getElementById("actualMilesInput").value;const newActualMilesUsed=parseInt(actualMilesInput);const reportedMiles=localStorage.getItem("reportedMiles");if(!reportedMiles){const actualMilesUsed=localStorage.getItem("actualMilesUsed");const milesValue=actualMilesUsed!=null?JSON.parse(actualMilesUsed):0;setReportedMilesLocalStorage(milesValue)}else{const reportedMilesObj=JSON.parse(reportedMiles);const newCurrentValue=newActualMilesUsed-(reportedMilesObj.startOfWeekValue+reportedMilesObj.currentValue)+reportedMilesObj.currentValue;reportedMilesObj.currentValue=newCurrentValue;localStorage.setItem("reportedMiles",JSON.stringify(reportedMilesObj));setTextContent("reportedMiles",newCurrentValue)}}function setValuesAndUpdateReportedMiles(){setReportedMiles();setValues();document.getElementById("actualMilesInput").value=""}document.getElementById("actualMilesInput").addEventListener("keydown",function(event){if(event.key==="Enter"){event.preventDefault();setValuesAndUpdateReportedMiles()}});document.getElementById("submitBtn").addEventListener("click",function(){setValuesAndUpdateReportedMiles()});function updateDifference(newActualMilesUsed){const difference=allowedMiles[daysLapsed]-newActualMilesUsed;const percentageDifference=(allowedMiles[daysLapsed]-newActualMilesUsed)/((allowedMiles[daysLapsed]+newActualMilesUsed)/2)*100;const differenceElement=document.querySelector(".difference");if(difference>0){differenceElement.textContent=`Under By ${difference.toFixed(0)} miles (${percentageDifference.toFixed(2)}%)`;differenceElement.classList.remove("over");differenceElement.classList.add("under")}else if(difference<0){differenceElement.textContent=`Over By ${Math.abs(difference).toFixed(0)} miles (${percentageDifference.toFixed(2)}%)`;differenceElement.classList.remove("under");differenceElement.classList.add("over")}else{differenceElement.textContent="Miles used are equal to miles allowed";differenceElement.classList.remove("under","over")}}const dateOptions={year:"numeric",month:"long",day:"numeric"};const daysSincePurchase=Math.floor((currentDate-purchaseDate)/(1e3*60*60*24));setTextContent("daysSincePurchase",daysSincePurchase);setTextContent("todayDate",currentDate.toLocaleDateString("en-US",dateOptions));setTextContent("monthMiles",allowedMilesInMonth);setTextContent("allowedSoFar",potentialCurrentMiles);setTextContent("purchaseDate",purchaseDate.toLocaleDateString("en-US",dateOptions));const totalAllowedSoFar=Math.floor(milesPerDay*daysSincePurchase);setTextContent("totalAllowedSoFar",totalAllowedSoFar.toFixed(0));setTextContent("allowedPerDay",milesPerDay);